import std::sv::{ SV }
import std::math
import std::set::{ Set }
import std::vector::{ Vector }
import .common::{ Grid, Point }

def solve(grid: Grid, factor: u64): u64 {
    let extra_cols = Set<u32>::new()
    let extra_rows = Set<u32>::new()
    defer extra_cols.free()
    defer extra_rows.free()

    assert grid.width == grid.height, `Grid must be square, got {grid.width}x{grid.height}`
    for let i = 0; i < grid.height; i++ {
        let empty_row = true
        let empty_col = true
        for let j = 0; j < grid.width; j++ {
            empty_row = empty_row and grid.at(j, i) == '.'
            empty_col = empty_col and grid.at(i, j) == '.'
        }
        if empty_row then extra_rows.add(i)
        if empty_col then extra_cols.add(i)
    }

    let galaxies = Vector<Point>::new()
    defer galaxies.free()

    let ni = 0u64
    for let i = 0; i < grid.height; i++ {
        if extra_rows.contains(i) then ni += (factor - 1)
        let nj = 0u64
        for let j = 0; j < grid.width; j++ {
            if extra_cols.contains(j) then nj += (factor - 1)
            if grid.at(j, i) == '#' {
                galaxies.push(Point(nj, ni))
            }
            nj++
        }
        ni++
    }

    let total = 0u64
    for let i = 0; i < galaxies.size; i++ {
        let gi = galaxies.at(i)

        for let j = i + 1; j < galaxies.size; j++ {
            let gj = galaxies.at(j)
            let dx = (gi.x as i64 - gj.x as i64).abs()
            let dy = (gi.y as i64 - gj.y as i64).abs()
            total += (dx + dy) as u64
        }
    }
    return total
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = SV::from_file(argv[1])
    let grid = Grid::make(sv)
    println(`Part 1: {solve(grid, 2)}`)
    println(`Part 2: {solve(grid, 1000000)}`)
}
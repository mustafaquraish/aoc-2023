import std::sv::{ SV }
import std::heap::{ Heap }
import .common::{ Grid }
import std::fs

struct Vec2 {
    x: i32
    y: i32
}

def Vec2::eq(this, other: Vec2): bool => .x == other.x and .y == other.y

struct State {
    pos: Vec2
    dir: Vec2
    cost: u32
}

// For the heap
def State::compare(this, other: State): i8 => (.cost - other.cost) as i8


// Maps can be slow here, so we use a perfect hash table that can map
// Each state to a unique index in an array. Rounding up, we have:
//    - 2 directions   (Only horizontal/vertical matters for the problem)
//    - N^2 points     (~20K for N=141)
// For a total of ~40K states, taking <0.2MB of memory with 32-bit integers.
struct Cache {
    d_max: u32
    p_max: u32
    grid_size: u32

    size: u32
    data: &u32
}

def Cache::make(N: u32): Cache {
    let cache: Cache
    cache.d_max = 2u32
    cache.p_max = N as u32 * N as u32
    cache.grid_size = N as u32
    cache.size = cache.d_max * cache.p_max
    cache.data = std::new<u32>(cache.size as u32)
    return cache
}


// Perfect hash function for the state
def Cache::hash(&this, s: State): u32 {
    // It doesn't matter if we're going left/right or up/down, only the axis.
    let d_hash = (s.dir.x == 0) as u32
    let p_hash = s.pos.x as u32 + s.pos.y as u32 * .grid_size
    return d_hash + .d_max * p_hash
}

def Cache::get(&this, state: State): u32 => .data[.hash(state)]
def Cache::set(&this, state: State, value: u32) => .data[.hash(state)] = value

def Cache::reset(&this) => std::libc::memset(.data, -1, .size as u32 * sizeof(u32))

def add_start_node(heap: &Heap<State>, costs: &Cache, start: Vec2, dir: Vec2) {
    let state = State(start, dir, 0)
    heap.push(state)
    costs.set(state, 0)
}

def solve(costs: &Cache, grid: Grid, ultra: bool): u32 {
    let N = grid.width as i32
    let start = Vec2(0, 0)
    let end = Vec2(N-1, N-1)

    let upper_limit = if ultra then 10 else 3
    let lower_limit = if ultra then 4 else 1

    let heap = Heap<State>::new(Min, capacity: 8192)
    costs.reset()

    add_start_node(heap, costs, start, Vec2(1, 0))
    add_start_node(heap, costs, start, Vec2(0, 1))

    let result = 0u32
    while not heap.is_empty() {
        let cur = heap.unchecked_pop()

        if cur.pos.eq(end) {
            result = cur.cost
            break
        }

        let offsets: [Vec2; 3]
        let count = 0
        
        offsets[count++] = Vec2(-cur.dir.y,  cur.dir.x)
        offsets[count++] = Vec2( cur.dir.y, -cur.dir.x)

        for let i = 0; i < count; i++ {
            let off = offsets[i]

            let new_pos = cur.pos
            let new_cost = cur.cost

            for let j = 1; j < upper_limit + 1; j++ {
                new_pos = Vec2(new_pos.x + off.x, new_pos.y + off.y)

                if new_pos.x < 0 or new_pos.x >= N break
                if new_pos.y < 0 or new_pos.y >= N break

                new_cost += grid.at(new_pos.x as u32, new_pos.y as u32).get_digit() as u32

                if j < lower_limit continue

                let new_state = State(new_pos, off, new_cost)
                let new_state_hash = costs.hash(new_state)

                if costs.data[new_state_hash] > new_cost {
                    costs.data[new_state_hash] = new_cost
                    heap.push(new_state)
                }
            }
        }
    }

    heap.free()
    return result
}


def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = fs::read_file(argv[1]).sv()
    let grid = Grid::make(sv)

    let cache = Cache::make(grid.width)

    println(`Part 1: {solve(&cache, grid, false)}`)
    println(`Part 2: {solve(&cache, grid, true)}`)
}
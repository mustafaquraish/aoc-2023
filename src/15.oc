import std::sv::{ SV }
import std::fs

def get_hash(sv: SV): u64 {
    let t = 0u8
    for c : sv .chars() {
        let a = t as u64 + c as u64
        t = (a * 17) as u8
    }
    return t as u64
}

struct Bucket {
    label: SV
    focal: u64
    next: &Bucket
}

struct Hashmap {
    buckets: [&Bucket; 256]
}

def Hashmap::free(&this) {
    for let i = 0; i < 256; i++ {
        let cur = .buckets[i]
        while cur? {
            let tmp = cur
            cur = cur.next
            std::libc::free(tmp)
        }
    }
}

def Hashmap::add(&this, label: SV, focal: u64) {
    let hash = get_hash(label)
    let cur = &.buckets[hash]

    while (*cur)? {
        if (*cur).label.eq(label) {
            (*cur).focal = focal
            return
        }
        cur = &(*cur).next
    }
    let new = std::new<Bucket>()
    new.label = label
    new.focal = focal
    new.next = *cur
    *cur = new
}

def Hashmap::remove(&this, label: SV) {
    let hash = get_hash(label)
    let cur = &.buckets[hash]
    while (*cur)? {
        if (*cur).label.eq(label) {
            let tmp = *cur
            *cur = (*cur).next
            std::libc::free(tmp)
            return
        }
        cur = &(*cur).next
    }
}

def Hashmap::power(&this): u64 {
    let total = 0u64
    for let i = 0; i < 256; i++ {
        let j = 1u64

        let cur = .buckets[i]
        while cur? {
            total += cur.focal * j * (i+1) as u64
            cur = cur.next
            j++
        }
    }
    return total
}

def Bucket::print_list(&this) {
    let cur = this
    while cur? {
        if cur != this {
            print(" , ")
        }
        print("(%.*s: %d)", cur.label.len, cur.label.data, cur.focal)
        cur = cur.next
    }
}

def Hashmap::print(&this) {
    for let i = 0; i < 256; i++ {
        let bucket = .buckets[i]
        if bucket? {
            print("Bucket %d: ", i)
            bucket.print_list()
            println("")
        }
    }
}

def part_one(sv: SV): u64 {
    let total = 0u64
    for part : sv.split_str(",") {
        total += get_hash(part)
    }
    return total
}

def part_two(sv: SV): u64 {
    let hashmap: Hashmap  // Automatically zeroed
    for p : sv.split_str(",") {
        if p.contains('-') {
            hashmap.remove(p.chop_by_str("-"))

        } else {
            let label = p.chop_by_str("=")
            let focal = p.chop_u64()
            hashmap.add(label, focal)
        }
    }
    return hashmap.power()
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = fs::read_file(argv[1]).sv()
    println(`Part 1: {part_one(sv)}`)
    println(`Part 2: {part_two(sv)}`)
}

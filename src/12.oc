import std::sv::{ SV }
import std::buffer::{ Buffer }
import std::compact_map::{ Map }
import std::vector::{ Vector }
import .common::Point
import std::fs


def solve_helper(L: SV, N: &Vector<u32>, No: u32): u64 {
    if No >= N.size return (L.count('#') == 0) as u64
    
    let cN = N.at(No)
    if L.len < cN then return 0

    let c = 0
    for let i = 0; i < L.len; i++ {
        if L.at(i) == '.' then break
        c += 1
    }

    let total = 0u64
    let can_put_here = (c >= cN and (cN as u32 == L.len or L.at(cN) != '#'))
    if L.at(0) != '.' and can_put_here {
        total += solve(L.slice(cN as u32 + 1), N, No + 1)
    }
    if L.at(0) != '#' {
        total += solve(L.slice(1), N, No)
    }
    return total
}

let memo: &Map<Point,u64>
def solve(L: SV, N: &Vector<u32>, No: u32): u64 {
    let pt = Point(L.len as u64, No as u64)
    let node = memo.get_item(pt)
    if node? return node.value

    let res = solve_helper(L, N, No)
    memo.insert(pt, res)
    return res
}

def part_one(sv: SV): u64 {
    let N = Vector<u32>::new()

    let total = 0u64
    for line : sv.lines() {
        let L = line.chop_word()
        for n : line.iter_nums() {
            N.push(n as u32)
        }
        let res = solve(L, N, 0)
        total += res

        N.clear()
        memo.clear()
    }
    return total
}

def part_two(sv: SV): u64 {
    let buf = Buffer::make()
    let N = Vector<u32>::new()
    let N2 = Vector<u32>::new()

    let total = 0u64
    for line : sv.lines() {
        let L = line.chop_word()
        for n : line.iter_nums() {
            N.push(n as u32)
        }

        for let i = 0; i < 5; i++ {
            if i > 0 {
                buf += '?'
            }
            buf += L
            N2.extend(N)
        }

        let res = solve(buf.sv(), N2, 0)

        buf.clear()
        N.clear()
        N2.clear()
        memo.clear()

        total += res
    }
    return total
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = fs::read_file(argv[1]).sv()
    memo = Map<Point,u64>::new(capacity: 1024)
    println(`Part 1: {part_one(sv)}`)
    println(`Part 2: {part_two(sv)}`)
}
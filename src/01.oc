import std::sv::{ SV }
import std::fs

def sv_starts_with(sv: SV, prefix: str): bool => sv.starts_with_str(prefix)
def sv_ends_with(sv: SV, suffix: str): bool => sv.ends_with_str(suffix)

def get_digit(sv: SV, first: bool, text: bool): u8 {
    while not sv.is_empty() {
        let c = sv.at(if first then 0 else sv.len - 1)
        if c.is_digit() return (c as u8) - ('0' as u8)

        let check_fn = if first then sv_starts_with else sv_ends_with
        if text {
            if check_fn(sv, "one") then return 1
            if check_fn(sv, "two") then return 2
            if check_fn(sv, "three") then return 3
            if check_fn(sv, "four") then return 4
            if check_fn(sv, "five") then return 5
            if check_fn(sv, "six") then return 6
            if check_fn(sv, "seven") then return 7
            if check_fn(sv, "eight") then return 8
            if check_fn(sv, "nine") then return 9
        }

        if first then sv.chop_left(1) else sv.chop_right(1)
    }

    assert false, "No digit found"
}

def solve(sv: SV, text: bool): i64 {
    let total = 0i64
    for line : sv.lines() {
        let first = get_digit(line, first: true, text)
        let last = get_digit(line, first: false, text)
        let num = (first * 10 + last) as i64
        total += num
    }
    return total
}

def part_one(sv: SV): i64 => solve(sv, false)
def part_two(sv: SV): i64 => solve(sv, true)

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = fs::read_file(argv[1]).sv()
    println(`Part 1: {part_one(sv)}`)
    println(`Part 2: {part_two(sv)}`)
}
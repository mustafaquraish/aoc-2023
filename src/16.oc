import std::sv::{ SV }
import std::compact_map::{ Map }
import std::vector::{ Vector }
import .common::{ Grid }
import std::traits::hash::pair_hash

struct Vec2 {
    x: i32
    y: i32
}

def Vec2::hash(this): u32 => pair_hash(.x.hash(), .y.hash())
def Vec2::eq(this, other: Vec2): bool => .x == other.x and .y == other.y

struct State {
    pos: Vec2
    dir: Vec2
}

def State::hash(this): u32 => pair_hash(.pos.hash(), .dir.hash())
def State::eq(this, other: State): bool => .pos.eq(other.pos) and .dir.eq(other.dir)

def is_valid(grid: &Grid, pos: Vec2): bool {
    if pos.x < 0 or pos.x >= grid.width as i32 then return false
    if pos.y < 0 or pos.y >= grid.height as i32 then return false
    return true
}

struct Hit {
    state: State
    seen: &Vector<Vec2>
}

struct Cache<T> {
    p_max: u32
    d_max: u32
    grid_size: u32

    size: u32
    data: &T
}

def Cache::make(N: u32): Cache<T> {
    let cache: Cache<T>
    cache.p_max = N as u32 * N as u32
    cache.d_max = 8u32 // For faster hashing
    cache.grid_size = N as u32
    cache.size = cache.d_max * cache.p_max
    cache.data = std::new<T>(cache.size as u32)
    return cache
}

// Perfect hash function for the state
def Cache::hash_state(&this, s: State): u32 {
    let d_hash = ((s.dir.x * 3) + 3 + s.dir.y) as u32
    let p_hash = s.pos.x as u32 + s.pos.y as u32 * .grid_size
    return p_hash + .p_max * d_hash
}

def Cache::hash_vec(&this, v: Vec2): u32 => v.x as u32 + v.y as u32 * .grid_size

def Cache::get_state(&this, state: State): T => .data[.hash_state(state)]
def Cache::set_state(&this, state: State, value: T) => .data[.hash_state(state)] = value

def Cache::get_vec(&this, v: Vec2): T => .data[.hash_vec(v)]
def Cache::set_vec(&this, v: Vec2, value: T) => .data[.hash_vec(v)] = value

def Cache::clear(&this) {
    std::libc::memset(.data, 0, .size as u32 * sizeof(T))
}


// This is the global cache which stores the next mirror we hit for a given state
// Only used for states where we are on a '.' cell
let next_map: Cache<Hit>

let seen_pos: Cache<bool>
let seen_state: Cache<bool>
let next: &Vector<State>

def num_energized_cells(grid: &Grid, start_pos: Vec2, start_dir: Vec2): u64 {
    // Note: Don't clear the cache here, we want to reuse it across calls
    seen_pos.clear()
    seen_state.clear()
    next.clear()

    next.push(State(start_pos, start_dir))
    while next.size > 0 {
        let st = next.unchecked_pop()
        let pos = st.pos
        let dir = st.dir

        if not is_valid(grid, pos) then continue

        let seen_state_idx = seen_state.hash_state(st)
        if seen_state.data[seen_state_idx] then continue
        seen_state.data[seen_state_idx] = true

        seen_pos.set_vec(pos, true)

        let c = grid.at(pos.x as u32, pos.y as u32)
        match c {
            '\\' => dir = Vec2(dir.y, dir.x)
            '/' => dir = Vec2(-dir.y, -dir.x)
            '|' => {
                if dir.y == 0 {
                    next.push(State(Vec2(pos.x, pos.y-1), Vec2(0, -1)))
                    next.push(State(Vec2(pos.x, pos.y+1), Vec2(0,  1)))
                    continue
                }
            }
            '-' => {
                if dir.x == 0 {
                    next.push(State(Vec2(pos.x-1, pos.y), Vec2(-1, 0)))
                    next.push(State(Vec2(pos.x+1, pos.y), Vec2( 1, 0)))
                    continue
                }
            }
            else => {
                let hit = next_map.get_state(st)

                // Find the nodes till the next mirror, and cache them
                if not hit.seen? {
                    let seen = Vector<Vec2>::new()
                    while true {
                        pos = Vec2(pos.x + dir.x, pos.y + dir.y)
                        if not is_valid(grid, pos) or grid.at(pos.x as u32, pos.y as u32) != '.' {
                            break
                        }
                        seen.push(pos)
                    }
                    let next_state = State(pos, dir)
                    hit = Hit(next_state, seen)
                    next_map.set_state(st, hit)
                }

                for let i = 0; i < hit.seen.size; i++ {
                    seen_pos.set_vec(hit.seen.data[i], true)
                }
                next.push(hit.state)
                continue
            }
        }

        let next_pos = Vec2(pos.x + dir.x, pos.y + dir.y)
        next.push(State(next_pos, dir))
    }

    let total = 0u64
    for let i = 0; i < seen_pos.p_max; i++ {
        total += seen_pos.data[i] as u64
    }

    return total
}

def part_one(grid: &Grid): u64 => num_energized_cells(grid, Vec2(0, 0), Vec2(1, 0))

def part_two(grid: &Grid): u64 {
    let N = grid.width as i32

    let mx = 0u64
    for let i = 0i32; i < N; i++ {
        mx = mx.max(num_energized_cells(grid, Vec2(  i,   0), Vec2( 0,  1)))
        mx = mx.max(num_energized_cells(grid, Vec2(  i, N-1), Vec2( 0, -1)))
        mx = mx.max(num_energized_cells(grid, Vec2(  0,   i), Vec2( 1,  0)))
        mx = mx.max(num_energized_cells(grid, Vec2(N-1,   i), Vec2(-1,  0)))
    }
    return mx
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = SV::from_file(argv[1])
    let grid = Grid::make(sv)

    next_map = Cache<Hit>::make(grid.width as u32)
    seen_pos = Cache<bool>::make(grid.width as u32)
    seen_state = Cache<bool>::make(grid.width as u32)
    next = Vector<State>::new(capacity: 4096)

    println(`Part 1: {part_one(&grid)}`)
    println(`Part 2: {part_two(&grid)}`)
}
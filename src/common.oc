import std::vector::{ Vector }
import std::sv::{ SV }
import std::traits::hash::{ pair_hash }

struct Point {
    x: u64
    y: u64
}

def Point::hash(&this): u32 => pair_hash(.x.hash(), .y.hash())
def Point::eq(this, other: Point): bool => .x == other.x and .y == other.y

struct Grid {
    lines: &Vector<str>
    width: u32
    height: u32
}

def Grid::empty(width: u32, height: u32, c: char = '.'): Grid {
    let lines = Vector<str>::new()
    for let i =  0; i < height; i++ {
        let s = std::new<char>(width + 1)
        for let j = 0; j < width; j++ {
            s[j] = c
        }
        lines.push(s)
    }
    return Grid(lines, width, height)
}

def Grid::make(sv: SV): Grid {
    let lines = Vector<str>::new()
    let width = 0
    for line : sv.lines() {
        let mem = std::new<char>(line.len + 1)
        std::libc::memcpy(mem, line.data, line.len)
        lines.push(mem)
        width = line.len
    }
    let height = lines.size
    return Grid(lines, width, height)
}

def Grid::at(&this, x: u32, y: u32): char => .lines.at(y)[x]
def Grid::at_point(&this, p: Point): char => .at(p.x as u32, p.y as u32)

def Grid::set(&this, x: u32, y: u32, c: char) {
    .lines.at(y)[x] = c
}
def Grid::set_point(&this, p: Point, c: char) {
    .set(p.x as u32, p.y as u32, c)
}

def Grid::free(&this) {
    for let i = 0; i < .height; i++ {
        std::libc::free(.lines.at(i))
    }
    .lines.free()
}

def Grid::print(&this) {
    for let i = 0; i < .height; i++ {
        for let j = 0; j < .width; j++ {
            let c = .at(j, i)
            print(`{c}`)
        }
        println("")
    }
}

def gcd(a: u64, b: u64): u64 => if b == 0 then a else gcd(b, a % b)
def lcm(a: u64, b: u64): u64 => a * b / gcd(a, b)

def gcd_vec(vec: &Vector<u64>): u64 {
    let res = 1u64
    for v : vec.iter() {
        res = gcd(res, v)
    }
    return res
}

def lcm_vec(vec: &Vector<u64>): u64 {
    let res = 1u64
    for v : vec.iter() {
        res = lcm(res, v)
    }
    return res
}

import std::vector::{ Vector }
import std::sv::{ SV }


struct Grid {
    lines: &Vector<str>
    width: u32
    height: u32
}

def Grid::make(sv: SV): Grid {
    let lines = Vector<str>::new()
    let width = 0
    for line : sv.lines() {
        lines.push(line.data)
        width = line.len
    }
    let height = lines.size
    return Grid(lines, width, height)
}

def Grid::at(&this, x: u32, y: u32): char => .lines.at(y)[x]

def Grid::free(&this) {
    .lines.free()
}

def gcd(a: u64, b: u64): u64 => if b == 0 then a else gcd(b, a % b)
def lcm(a: u64, b: u64): u64 => a * b / gcd(a, b)

def gcd_vec(vec: &Vector<u64>): u64 {
    let res = 1u64
    for v : vec.iter() {
        res = gcd(res, v)
    }
    return res
}

def lcm_vec(vec: &Vector<u64>): u64 {
    let res = 1u64
    for v : vec.iter() {
        res = lcm(res, v)
    }
    return res
}

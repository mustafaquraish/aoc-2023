import std::sv::{ SV }
import std::fs

def part_one(sv: SV): i64 {
    let total = 0i64

    let R = 12
    let G = 13
    let B = 14

    for line : sv.lines() {
        let possible = true    
    
        let prefix = line.chop_by_str(":")
        prefix.chop_word()
        let num = prefix.chop_u32()
    
        for part : line.split_str(";") {
            for p : part.split_str(",") {
                let n = p.chop_u32()
                let c = p.chop_word()
                if c.eq_str("blue") and n > B then possible = false
                if c.eq_str("green") and n > G then possible = false
                if c.eq_str("red") and n > R then possible = false
            }
        }

        if possible then total += num as i64
    }
    return total
}

def part_two(sv: SV): i64 {
    let total = 0i64
    for line : sv.lines() {
        let R = 0
        let G = 0
        let B = 0

        line.chop_by_str(":")
        for part : line.split_str(";") {
            for p : part.split_str(",") {
                let n = p.chop_u32()
                let c = p.chop_word()
                if c.eq_str("blue") then R = R.max(n)
                if c.eq_str("green") then G = G.max(n)
                if c.eq_str("red") then B = B.max(n)
            }
        }
        total += (R * G * B) as i64
    }
    return total
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = fs::read_file(argv[1]).sv()
    println(`Part 1: {part_one(sv)}`)
    println(`Part 2: {part_two(sv)}`)
}
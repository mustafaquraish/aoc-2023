import std::sv::{ SV }
import std::map::{ Map }
import std::set::{ Set }
import std::vector::{ Vector }
import .common::*


def find_symbol_around(grid: Grid, x: u32, y: u32, sym: str = null): i32 {
    for let dx = -1; dx <= 1; dx++ {
        for let dy = -1; dy <= 1; dy++ {
            if dx == 0 and dy == 0 then continue

            let nx = x as i32 + dx
            let ny = y as i32 + dy
            if 0i32 <= nx < grid.width as i32 and 0i32 <= ny < grid.height as i32 {
                let c = grid.at(nx as u32, ny as u32)
                let idx = grid.width as i32 * ny + nx

                if sym == null {
                    if not c.is_digit() and c != '.' {
                        return idx
                    }
                } else if c == sym[0] {
                    return idx
                }
            }
        }
    }
    return -1
}

def part_one(sv: SV): i64 {
    let grid = Grid::make(sv)
    let total = 0i64

    let cur_num = 0
    let cur_has_symbol = false

    defer grid.free()

    for let y = 0; y < grid.height; y++ {

        for let x = 0; x <= grid.width + 1; x++ {
            let c = grid.at(x, y)
            if x < grid.width and c.is_digit() {
                cur_num = cur_num * 10 + (c as u32 - '0' as u32)
                if find_symbol_around(grid, x, y) >= 0 {
                    cur_has_symbol = true
                }
            } else {
                if cur_has_symbol then total += cur_num as i64
                cur_num = 0
                cur_has_symbol = false
            }
        }
    }
    return total
}

def part_two(sv: SV): i64 {
    let grid = Grid::make(sv)
    let gear_map = Map<u32, &Vector<u32>>::new()

    let cur_gears = Set<u32>::new()
    let cur_num = 0

    defer grid.free()
    defer gear_map.free()
    defer cur_gears.free()

    for let y = 0; y < grid.height; y++ {
        for let x = 0; x <= grid.width; x++ {
            let c = grid.at(x, y)
            if x < grid.width and c.is_digit() {
                cur_num = cur_num * 10 + (c as u32 - '0' as u32)
                let gear = find_symbol_around(grid, x, y, "*")
                if gear >= 0 {
                    cur_gears.add(gear as u32)
                }

            } else {
                if cur_num > 0 {
                    for gear : cur_gears.iter() {
                        if not gear_map.contains(gear) {
                            gear_map.insert(gear, Vector<u32>::new())
                        }
                        gear_map.at(gear).push(cur_num)
                    }
                    cur_gears.clear()
                }
                cur_num = 0
            }
        }
    }

    let total = 0i64
    for it : gear_map.iter() {
        if it.value.size != 2 then continue

        let prod = 1
        for v : it.value.iter() {
            prod *= v
        }
        total += prod as i64
    }
    return total
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = SV::from_file(argv[1])
    println(`Part 1: {part_one(sv)}`)
    println(`Part 2: {part_two(sv)}`)
}
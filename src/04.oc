import std::sv::{ SV }
import std::set::{ Set }
import std::vector::{ Vector }
import std::fs


def solve(sv: SV, one: &u64, two: &u64) {
    let s = Set<u64>::new()
    let copies = Vector<u64>::new()

    for line : sv.lines() {
        copies.push(1)
    }

    let i = 0
    for line : sv.lines() {
        line.chop_by_str(":")
        let win = line.chop_by_str("|")
        for w : win.iter_nums() {
            s.add(w)
        }
        let num_match = 0
        for n : line.iter_nums() {
            if s.contains(n) then num_match += 1
        }
        for let j = 1; j <= num_match and i + j < copies.size; j++ {
            copies.data[i+j] += copies.data[i]
        }
        if num_match > 0 then {
            *one += (1 << (num_match-1)) as u64
        }
        *two += copies.data[i]
        i++
        s.clear()
    }

    s.free()
    copies.free()
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = fs::read_file(argv[1]).sv()
    let one = 0u64
    let two = 0u64
    solve(sv, &one, &two)
    println(`Part 1: {one}`)
    println(`Part 2: {two}`)
}
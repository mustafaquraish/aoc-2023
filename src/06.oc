import std::sv::{ SV }
import std::math
import std::fs

def solve(t: i64, d: i64): i64 {
    let disc = ((t*t - d*4) as f64).sqrt()
    let lo = ((t as f64 + disc) / 2.0).ceil() as i64
    let hi = ((t as f64 - disc) / 2.0).floor() as i64
    return lo - hi - 1
}

def part_one(sv: SV): i64 {
    let ts = sv.chop_line()
    let ds = sv.chop_line()
    ts.chop_word()
    ds.chop_word()

    let total = 1i64
    while not ts.is_empty() {
        let t = ts.chop_i64()
        let d = ds.chop_i64()
        total *= solve(t, d)
    }
    return total
}

def part_two(sv: SV): i64 {
    let ts = sv.chop_line()
    let ds = sv.chop_line()

    let t = 0i64
    for let i = 0; i < ts.len; i++ {
        if ts.data[i].is_digit() {
            t = t * 10 + (ts.data[i].get_digit() as i64)
        }
    }

    let d = 0i64
    for let i = 0; i < ds.len; i++ {
        if ds.data[i].is_digit() {
            d = d * 10 + (ds.data[i].get_digit() as i64)
        }
    }

    return solve(t, d)
}

def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = fs::read_file(argv[1]).sv()
    println(`Part 1: {part_one(sv)}`)
    println(`Part 2: {part_two(sv)}`)
}
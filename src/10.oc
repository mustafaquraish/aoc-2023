import std::sv::{ SV }
import std::compact_map::{ Map }
import std::vector::{ Vector }
import .common::Grid

struct Node {
    x: u32,
    y: u32,
    c: char,
    neighbors: &Vector<&Node>,
}

def Node::new(x: u32, y: u32, c: char): &Node {
    let node = std::new<Node>()
    node.x = x
    node.y = y
    node.c = c
    node.neighbors = Vector<&Node>::new()
    return node
}

def Node::free(&this) {
    .neighbors.free()
    std::libc::free(this)
}

// Nodes are uniquely identified by their address in this case, 
// So the hash and eq functions just use the address as the hash
def Node::hash(&this): u32 => (this as u64).hash()
def Node::eq(&this, other: &Node): bool => this == other

def Node::connected_to(&this, x: u32, y: u32): bool {
    for n : .neighbors.iter() {
        if n.x == x and n.y == y return true
    }
    return false
}

struct Graph {
    width: u32
    height: u32
    nodes: &Vector<&Node>
    start: &Node
}

def Graph::free(&this) {
    for n : .nodes.iter() {
        n.free()
    }
    .nodes.free()
}

def Graph::draw(&this, cycle: &Map<&Node, bool>) {
    for let y = 0; y < .height; y++ {
        for let x = 0; x < .width; x++ {
            let node = .get(x, y)
            let disp = match node.c {
                '|' => "│"
                '-' => "─"
                'J' => "┘"
                'L' => "└"
                'F' => "┌"
                '7' => "┐"
                '.' => " "
                'S' => "S"
                else => "?"
            }
            let on_cycle = cycle.contains(node)
            if on_cycle {
                print(`\x1b[31m{disp}\x1b[0m`)
            } else {
                // print in light grey
                print(`\x1b[90m{disp}\x1b[0m`)
            }
        }
        println("")
    }
}

def Graph::get(&this, x: u32, y: u32): &Node {
    if 0 <= x < .width and 0 <= y < .height {
        return .nodes.at(y * .width + x)
    }
    return null
}

def Graph::add_neighbour(&this, node: &Node, x: u32, y: u32) {
    let neighbour = .get(x, y)
    if neighbour? {
        node.neighbors.push(neighbour)
    }
}


def Graph::make(grid: Grid): Graph {
    let nodes = Vector<&Node>::new()
    let graph = Graph(grid.width, grid.height, nodes, null)

    // Add all nodes to the graph
    for let y = 0; y < grid.height; y++ {
        for let x = 0; x < grid.width; x++ {
            nodes.push(Node::new(x, y, grid.at(x, y)))
        }
    }

    // Add in the neighbours
    for let y = 0; y < grid.height; y++ {
        for let x = 0; x < grid.width; x++ {
            let node = graph.get(x, y)
            match node.c {
                '|' => {
                    graph.add_neighbour(node, x, y - 1)
                    graph.add_neighbour(node, x, y + 1)
                }
                '-' => {
                    graph.add_neighbour(node, x - 1, y)
                    graph.add_neighbour(node, x + 1, y)
                }
                'L' => {
                    graph.add_neighbour(node, x, y - 1)
                    graph.add_neighbour(node, x + 1, y)
                }
                'J' => {
                    graph.add_neighbour(node, x, y - 1)
                    graph.add_neighbour(node, x - 1, y)
                }
                '7' => {
                    graph.add_neighbour(node, x, y + 1)
                    graph.add_neighbour(node, x - 1, y)
                }
                'F' => {
                    graph.add_neighbour(node, x, y + 1)
                    graph.add_neighbour(node, x + 1, y)
                }
                '.' => {}
                'S' => {
                    assert graph.start == null, `Multiple start nodes`
                    graph.start = node
                }
                else => assert false, `Invalid node type: {node.c}`
            }
        }
    }
    assert graph.start != null, `No start node`

    /// Now, we need to add in the neighbours for the start node

    // For each node around the start one
    for let dy = -1; dy <= 1; dy++ {
        for let dx = -1; dx <= 1; dx++ {
            if dx == 0 and dy == 0 then continue

            // Negative will blow up to out of bounds, so just casting should be OK
            let x = (graph.start.x as i32 + dx) as u32  
            let y = (graph.start.y as i32 + dy) as u32
            let node = graph.get(x, y)
            if not node? then continue

            if node.connected_to(graph.start.x, graph.start.y) {
                graph.add_neighbour(graph.start, x, y)
            }
        }
    }
    return graph
}

def solve(g: Graph) {
    let prev = null
    let cur = g.start

    // ***** PART 1 *****

    // Discover the cycle
    let cycle = Map<&Node, bool>::new()
    while true {
        cycle.insert(cur, true)

        // Pick the neighbour that isn't the previous one
        let next = cur.neighbors.at(0)
        if next == prev {
            next = cur.neighbors.at(1)
        }

        // Update the previous and current nodes
        prev = cur
        cur = next

        // Back at the start node
        if cur == g.start {
            break
        }
    }

    // g.draw(cycle)

    println(`Part 1: {cycle.size() / 2}`)

    // ***** PART 2 *****

    let total_internal_nodes = 0
    for let y = 0; y < g.height; y++ {

        let row_internal_nodes = 0

        // Here, we're going to count the number of internal nodes in this row.
        // We do this by keeping track of whether we're in the "inside" or "outside"
        // sections of the loop.

        // Inside or outside the loop?
        let is_inside_loop = false
        // Are we currently on the loop itself?
        let is_on_cycle = false
        // When we got on the loop, were we entering from the top ('L') or bottom ('F')?
        let entered_cycle_from_bottom = false

        for let x = 0; x < g.width; x++ {
            let node = g.get(x, y)

            // For any node that's not on the loop itself, and is inside the loop (based on the state), we increment the count.
            if not cycle.contains(node) {
                if is_inside_loop {
                    row_internal_nodes += 1
                }

            // Otherwise, we need to update the state
            } else {
                // Case 1: If the node is '|', then we toggle the inside/outside state
                if node.c == '|' {
                   is_inside_loop = not is_inside_loop 

                // Case 2: If the node is '-', then inside/outside state stays the same
                } else if node.c == '-' {


                // Case 3: Otherwise
                // Here, we're either getting on or off the loop. The key idea here is to keep track
                // of the "directions" from which we get on/off. Specifically, this refers to whether 
                // the node thatgot us onto the loop was connected to the node above ('L') or below ('F'). 
                // 
                // With this, we can make some observations:
                //    - If we get on/off from the top ('L--J'), the inside/outside state doesn't change
                //    - If we get on/off from the bottom ('F--7'), the inside/outside state doesn't change
                //    - If we get on/off from different sides ('L--7' or 'F--J'), this toggles being inside or outside the loop.
                } else if not is_on_cycle {
                    entered_cycle_from_bottom = node.connected_to(x, y + 1)
                    is_on_cycle = true
                
                // We're already on a cycle, we must be exiting. Swap inside/outside state if we're exiting from the opposite side
                } else {
                    let exiting_cycle_from_bottom = node.connected_to(x, y + 1)
                    if exiting_cycle_from_bottom != entered_cycle_from_bottom {
                        is_inside_loop = not is_inside_loop
                    }
                    is_on_cycle = false

                }
            }

        }
        total_internal_nodes += row_internal_nodes
    }

    println(`Part 2: {total_internal_nodes}`)
}


def main(argc: i32, argv: &str) {
    assert argc > 1, `Usage: {argv[0]} <input file>`
    let sv = SV::from_file(argv[1])
    let grid = Grid::make(sv)
    let graph = Graph::make(grid)
    solve(graph)
    graph.free()
}